// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models;

namespace WEB___NEW.Migrations
{
    [DbContext(typeof(SkolaContext))]
    [Migration("20220321003139_V4")]
    partial class V4
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("Models.Kurs", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Cena")
                        .HasColumnType("int")
                        .HasColumnName("Cena(€)");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("VremeTrajanja")
                        .HasColumnType("int")
                        .HasColumnName("Vreme trajanja kursa(u mesecima)");

                    b.HasKey("ID");

                    b.ToTable("Kurs");
                });

            modelBuilder.Entity("Models.Predaje", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("KursID")
                        .HasColumnType("int");

                    b.Property<int?>("PredavacID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KursID");

                    b.HasIndex("PredavacID");

                    b.ToTable("Predaje");
                });

            modelBuilder.Entity("Models.Predavac", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("JMBG")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Sertifikat")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("SkolaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SkolaID");

                    b.ToTable("Predavač");
                });

            modelBuilder.Entity("Models.Sadrzi", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("BrojUcenika")
                        .HasColumnType("int")
                        .HasColumnName("Broj učenika");

                    b.Property<int?>("KursID")
                        .HasColumnType("int");

                    b.Property<int?>("SkolaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KursID");

                    b.HasIndex("SkolaID");

                    b.ToTable("Sadrži");
                });

            modelBuilder.Entity("Models.Skola", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("UpravnikID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UpravnikID");

                    b.ToTable("Škola");
                });

            modelBuilder.Entity("Models.Slusa", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("KursID")
                        .HasColumnType("int");

                    b.Property<int>("Ocena")
                        .HasColumnType("int");

                    b.Property<int?>("UcenikID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("KursID");

                    b.HasIndex("UcenikID");

                    b.ToTable("Sluša");
                });

            modelBuilder.Entity("Models.Ucenik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ClanskaKnjizica")
                        .HasColumnType("int")
                        .HasColumnName("Članska knjižica");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("ImeRoditelja")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Ime roditelja");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("SkolaID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("SkolaID");

                    b.ToTable("Učenik");
                });

            modelBuilder.Entity("Models.Upravnik", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("E-mail");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("Password");

                    b.HasKey("ID");

                    b.ToTable("Upravnik");
                });

            modelBuilder.Entity("Models.Predaje", b =>
                {
                    b.HasOne("Models.Kurs", "Kurs")
                        .WithMany("KursPredavac")
                        .HasForeignKey("KursID");

                    b.HasOne("Models.Predavac", "Predavac")
                        .WithMany("PredavacKurs")
                        .HasForeignKey("PredavacID");

                    b.Navigation("Kurs");

                    b.Navigation("Predavac");
                });

            modelBuilder.Entity("Models.Predavac", b =>
                {
                    b.HasOne("Models.Skola", "Skola")
                        .WithMany("Predavaci")
                        .HasForeignKey("SkolaID");

                    b.Navigation("Skola");
                });

            modelBuilder.Entity("Models.Sadrzi", b =>
                {
                    b.HasOne("Models.Kurs", "Kurs")
                        .WithMany("KursSkola")
                        .HasForeignKey("KursID");

                    b.HasOne("Models.Skola", "Skola")
                        .WithMany("SkolaKurs")
                        .HasForeignKey("SkolaID");

                    b.Navigation("Kurs");

                    b.Navigation("Skola");
                });

            modelBuilder.Entity("Models.Skola", b =>
                {
                    b.HasOne("Models.Upravnik", "Upravnik")
                        .WithMany("Skole")
                        .HasForeignKey("UpravnikID");

                    b.Navigation("Upravnik");
                });

            modelBuilder.Entity("Models.Slusa", b =>
                {
                    b.HasOne("Models.Kurs", "Kurs")
                        .WithMany("KursUcenik")
                        .HasForeignKey("KursID");

                    b.HasOne("Models.Ucenik", "Ucenik")
                        .WithMany("UcenikKurs")
                        .HasForeignKey("UcenikID");

                    b.Navigation("Kurs");

                    b.Navigation("Ucenik");
                });

            modelBuilder.Entity("Models.Ucenik", b =>
                {
                    b.HasOne("Models.Skola", "Skola")
                        .WithMany("Ucenici")
                        .HasForeignKey("SkolaID");

                    b.Navigation("Skola");
                });

            modelBuilder.Entity("Models.Kurs", b =>
                {
                    b.Navigation("KursPredavac");

                    b.Navigation("KursSkola");

                    b.Navigation("KursUcenik");
                });

            modelBuilder.Entity("Models.Predavac", b =>
                {
                    b.Navigation("PredavacKurs");
                });

            modelBuilder.Entity("Models.Skola", b =>
                {
                    b.Navigation("Predavaci");

                    b.Navigation("SkolaKurs");

                    b.Navigation("Ucenici");
                });

            modelBuilder.Entity("Models.Ucenik", b =>
                {
                    b.Navigation("UcenikKurs");
                });

            modelBuilder.Entity("Models.Upravnik", b =>
                {
                    b.Navigation("Skole");
                });
#pragma warning restore 612, 618
        }
    }
}
